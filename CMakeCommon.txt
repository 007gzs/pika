SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated -g -D'GIT_COMMIT_ID=\"${GIT_COMMIT_ID}\"' -D'BUILD_TIME=\"${BUILD_TIME}\"'")

# Avoid warning about DOWNLOAD_EXTRACT_TIMESTAMP in CMake 3.24:
IF(CMAKE_VERSION VERSION_GREATER_EQUAL "3.24.0")
  CMAKE_POLICY(SET CMP0135 NEW)
ENDIF()

SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)
ENABLE_TESTING()

IF(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  # using Clang
  IF(CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.0")
    MESSAGE(FATAL_ERROR "Clang version must be greater than 5.0")
  ENDIF()
ELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  # using GCC
  IF(CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0")
    MESSAGE(FATAL_ERROR "GCC G++ version must be greater than 7.0")
  ENDIF()
ENDIF()


############# You should enable sanitizer if you are developing pika #############
# Uncomment the following two lines to enable AddressSanitizer to detect memory leaks and other memory-related bugs.
# SET(CMAKE_BUILD_TYPE "Debug")
# SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address  -O0 -fno-omit-frame-pointer -fno-optimize-sibling-calls")

# [Notice] AddressSanitizer and ThreadSanitizer can not be enabled at the same time.

# Uncomment the following two lines to enable ThreadSanitizer to detect data race and other thread-related issue.
# SET(CMAKE_BUILD_TYPE "Debug")
# SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=thread -O0 -fno-omit-frame-pointer -fno-optimize-sibling-calls")

EXECUTE_PROCESS(COMMAND uname -p OUTPUT_VARIABLE HOST_ARCH)
STRING(TOLOWER ${HOST_ARCH} HOST_ARCH)

IF (NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE RELEASE)
ENDIF()

# NOTE !!! CMAKE_BUILD_TYPE is case-sensitive
STRING(TOUPPER ${CMAKE_BUILD_TYPE} BUILD_TYPE)

IF(${BUILD_TYPE} STREQUAL DEBUG)
  SET(LIB_BUILD_TYPE DEBUG)
ELSEIF(${BUILD_TYPE} STREQUAL MINSIZEREL)
  SET(LIB_BUILD_TYPE MINSIZEREL)
ELSEIF(${BUILD_TYPE} STREQUAL RELWITHDEBINFO)
  SET(LIB_BUILD_TYPE RELWITHDEBINFO)
ELSE()
  SET(LIB_BUILD_TYPE RELEASE)
  SET(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG")
ENDIF()

IF(CMAKE_SYSTEM_NAME MATCHES "Darwin")
   SET(CMAKE_CXX_FLAGS "-pthread")
   ADD_DEFINITIONS(-DOS_MACOSX)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Linux")
   IF(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
     SET(CMAKE_EXE_LINKER_FLAGS "-stdlib=libc++ -fuse-ld=lld -lc++ -lc++abi ${CMAKE_EXE_LINKER_FLAGS}")
     SET(CMAKE_CXX_FLAGS "-stdlib=libc++ -pthread ${CMAKE_CXX_FLAGS}")
   ELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
     SET(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++")
     SET(CMAKE_CXX_FLAGS "-pthread -Wl,--no-as-needed -ldl")
   ENDIF()
   ADD_DEFINITIONS(-DOS_LINUX)
ELSE()
   MESSAGE(FATAL_ERROR "only support linux or macOS")
ENDIF()

IF(HOST_ARCH MATCHES "x86_64" OR HOST_ARCH MATCHES "i386")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse -msse4.2")
ELSEIF(HOST_ARCH MATCHES "arm")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv8-a+crc+crypto -moutline-atomics")
ENDIF()

SET(EP_BASE_SUFFIX "buildtrees")
SET_PROPERTY(DIRECTORY PROPERTY EP_BASE ${CMAKE_CURRENT_SOURCE_DIR}/${EP_BASE_SUFFIX})
LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake/modules/")
SET(STAGED_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/deps)
SET(CMAKE_UTILS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/utils)
SET(INSTALL_INCLUDEDIR ${STAGED_INSTALL_PREFIX}/include)
SET(INSTALL_LIBDIR ${STAGED_INSTALL_PREFIX}/lib)
SET(INSTALL_LIBDIR_64 ${STAGED_INSTALL_PREFIX}/lib64)
SET(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${STAGED_INSTALL_PREFIX})

MESSAGE(STATUS "${PROJECT_NAME} staged install: ${STAGED_INSTALL_PREFIX}")
MESSAGE(STATUS "Current platform: ${OS_VERSION} ")
CMAKE_HOST_SYSTEM_INFORMATION(RESULT CPU_CORE QUERY NUMBER_OF_LOGICAL_CORES)
MESSAGE(STATUS "CPU core ${CPU_CORE}")

FIND_PROGRAM(AUTOCONF autoconf PATHS /usr/bin /usr/local/bin)

IF(${AUTOCONF} MATCHES AUTOCONF-NOTFOUND)
  MESSAGE(FATAL_ERROR "not find autoconf on localhost")
ENDIF()

#set(CLANG_SEARCH_PATH "/usr/local/bin" "/usr/bin" "/usr/local/opt/llvm/bin"
#                      "/usr/local/opt/llvm@12/bin")
FIND_PROGRAM(CLANG_TIDY_BIN
        NAMES clang-tidy clang-tidy-12
        HINTS ${CLANG_SEARCH_PATH})
IF("${CLANG_TIDY_BIN}" STREQUAL "CLANG_TIDY_BIN-NOTFOUND")
  MESSAGE(WARNING "couldn't find clang-tidy.")
ELSE()
  MESSAGE(STATUS "found clang-tidy at ${CLANG_TIDY_BIN}")
ENDIF()

FIND_PROGRAM(CLANG_APPLY_REPLACEMENTS_BIN
        NAMES clang-apply-replacements clang-apply-replacements-12
        HINTS ${CLANG_SEARCH_PATH})

IF("${CLANG_APPLY_REPLACEMENTS_BIN}" STREQUAL "CLANG_APPLY_REPLACEMENTS_BIN-NOTFOUND")
    MESSAGE(WARNING "couldn't find clang-apply-replacements.")
ELSE()
    MESSAGE(STATUS "found clang-apply-replacements at ${CLANG_APPLY_REPLACEMENTS_BIN}")
ENDIF()

OPTION(WITH_COMMAND_DOCS "build with command docs support" OFF)
IF(WITH_COMMAND_DOCS)
  ADD_DEFINITIONS(-DWITH_COMMAND_DOCS)
ENDIF()

IF(${CMAKE_BUILD_TYPE} MATCHES "RELEASE")
    MESSAGE(STATUS "make RELEASE version")
    ADD_DEFINITIONS(-DBUILD_RELEASE)
    SET(BuildType "Release")
ELSE()
    MESSAGE(STATUS "make DEBUG version")
    ADD_DEFINITIONS(-DBUILD_DEBUG)
    SET(BuildType "Debug")
ENDIF()

INCLUDE(FetchContent)

# leveldb
FETCHCONTENT_DECLARE(
    leveldb
    GIT_REPOSITORY https://github.com/google/leveldb.git
    GIT_TAG main
)
SET(LEVELDB_BUILD_TESTS OFF CACHE BOOL "" FORCE)
SET(LEVELDB_BUILD_BENCHMARKS OFF CACHE BOOL "" FORCE)
SET(LEVELDB_INSTALL OFF CACHE BOOL "" FORCE)
FETCHCONTENT_MAKEAVAILABLE(leveldb)

# spdlog
FETCHCONTENT_DECLARE(
    spdlog
    GIT_REPOSITORY https://github.com/gabime/spdlog.git
    GIT_TAG v1.9.0
)
FETCHCONTENT_MAKEAVAILABLE(spdlog)

# libevent
FETCHCONTENT_DECLARE(
    libevent
    GIT_REPOSITORY https://github.com/libevent/libevent.git
    GIT_TAG release-2.1.12-stable
)

SET(EVENT__DISABLE_THREAD_SUPPORT ON CACHE BOOL "" FORCE)
SET(EVENT__DISABLE_OPENSSL ON CACHE BOOL "" FORCE)
SET(EVENT__DISABLE_BENCHMARK ON CACHE BOOL "" FORCE)
SET(EVENT__DISABLE_TESTS ON CACHE BOOL "" FORCE)
SET(EVENT__DISABLE_REGRESS ON CACHE BOOL "" FORCE)
SET(EVENT__DISABLE_SAMPLES ON CACHE BOOL "" FORCE)
SET(EVENT__LIBRARY_TYPE STATIC CACHE STRING "" FORCE)
FETCHCONTENT_MAKEAVAILABLE(libevent)

# nodejs/llhttp
FETCHCONTENT_DECLARE(
    llhttp
    URL https://github.com/nodejs/llhttp/archive/refs/tags/release/v6.0.5.tar.gz
    URL_HASH MD5=7ec6829c56642cce27e3d8e06504ddca
    DOWNLOAD_NO_PROGRESS 1
    UPDATE_COMMAND ""
    LOG_CONFIGURE 1
    LOG_BUILD 1
    LOG_INSTALL 1
    BUILD_ALWAYS 1
    CMAKE_ARGS
     -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}
     -DCMAKE_BUILD_TYPE=${LIB_BUILD_TYPE}
     -DBUILD_STATIC_LIBS=ON
     -DBUILD_SHARED_LIBS=OFF
    BUILD_COMMAND make -j${CPU_CORE}
)
FETCHCONTENT_MAKEAVAILABLE(llhttp)
